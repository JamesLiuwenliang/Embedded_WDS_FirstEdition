

.text
.global _start

_start:
	b reset  /* vector 0 : reset */
	b do_und /* vector 4 : reset */

	
do_und:
	/* 执行到这里之前发生很多事情
	 * 1) lr_und保存有被中断模式的下一条即将执行的指令的地址
	 * 2) SPSR_und 保存有被中断模式的CPSR
	 * 3) CPSR中的M4-M0被设置为11011,进入到und模式
	 * 4) 跳到0x4的地方执行程序
	 * CPSR : 当前程序状态寄存器; SPSR : 程序状态保存寄存器
	 */

	/* sp_und未设置,先设置 */
	/* 这个do_und模块还没在栈上开辟内存,所以需要找到一块内存(0x34000000)来存放*/
	ldr sp,=0x34000000

	/* lr是异常处理完后的返回地址,也要保存*/
	/* stmdb : 先减再存 */
	stmdb sp!,{r0-r12 ,lr } /*在und异常处理函数中有可能会修改r0-r12,所以先保存到栈上*/
	
	/*保存现场*/

	/*处理und异常*/
	mrs r0,cpsr
	ldr r1,=und_string   /*把字符串的地址赋给R1*/
	bl printException


	/*恢复现场*/
	/* ldmia : 先读再加 */
	ldmia sp!,{r0-r12,pc}^ /* ^ :会把spsr的值恢复到cpsr里 , ia : 先读后加*/



und_string:
	.string "undefined instruction exception"    /**/



reset:
	

	/* 关闭看门狗 */
	ldr r0, =0x53000000
	ldr r1, =0
	str r1, [r0]

	/* 设置MPLL, FCLK : HCLK : PCLK = 400m : 100m : 50m */
	/* LOCKTIME(0x4C000000) = 0xFFFFFFFF */
	ldr r0, =0x4C000000
	ldr r1, =0xFFFFFFFF
	str r1, [r0]

	/* CLKDIVN(0x4C000014) = 0X5, tFCLK:tHCLK:tPCLK = 1:4:8  */
	ldr r0, =0x4C000014
	ldr r1, =0x5
	str r1, [r0]

	/* 设置CPU工作于异步模式 */
	mrc p15,0,r0,c1,c0,0
	orr r0,r0,#0xc0000000   //R1_nF:OR:R1_iA
	mcr p15,0,r0,c1,c0,0

	/* 设置MPLLCON(0x4C000004) = (92<<12)|(1<<4)|(1<<0) 
	 *  m = MDIV+8 = 92+8=100
	 *  p = PDIV+2 = 1+2 = 3
	 *  s = SDIV = 1
	 *  FCLK = 2*m*Fin/(p*2^s) = 2*100*12/(3*2^1)=400M
	 */
	ldr r0, =0x4C000004
	ldr r1, =(92<<12)|(1<<4)|(1<<0)
	str r1, [r0]

	/* 一旦设置PLL, 就会锁定lock time直到PLL输出稳定
	 * 然后CPU工作于新的频率FCLK
	 */
	
	

	/* 设置内存: sp 栈 */
	/* 分辨是nor/nand启动
	 * 写0到0地址, 再读出来
	 * 如果得到0, 表示0地址上的内容被修改了, 它对应ram, 这就是nand启动
	 * 否则就是nor启动
	 */
	mov r1, #0
	ldr r0, [r1] /* 读出原来的值备份 */
	str r1, [r1] /* 0->[0] */ 
	ldr r2, [r1] /* r2=[0] */
	cmp r1, r2   /* r1==r2? 如果相等表示是NAND启动 */
	ldr sp, =0x40000000+4096 /* 先假设是nor启动 */
	moveq sp, #4096  /* nand启动 */
	streq r0, [r1]   /* 恢复原来的值 */

	bl sdram_init	
	
	bl copy2sdram /*src dest len*/
	
	bl clean_bss /* start end */

	bl uart0_init
	
	bl print1

	/* 故意加入一条未定义指令 */
und_code:		
	.word 0x03000000 /*未定义指令,会跳到do_und:这个模块,执行相应操作*/
	bl print2

	//bl main /* 使用BL命令相对跳转,程序仍然在nor/sdram执行 */
	ldr pc,=main /*绝对跳转,跳到SDRAM*/

halt:
	b halt
	
